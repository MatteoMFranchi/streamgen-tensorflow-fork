[comment encoding = UTF-8 /]
[module generateFlinkApplication('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/uml2/5.0.0/UML')]

[import streamgen::main::queryUtils/]
[import streamgen::flink::generateFlinkSources/]
[import streamgen::flink::generateFlinkTransformations/]
[import streamgen::flink::generateFlinkSinks/]

[template public generateFlinkApplication(aModel : Model)]

[file (aModel.name.toLower().concat('/application/').concat(aModel.name.concat('.java')), false, 'UTF-8')]
package [aModel.name.toLower().concat('.application')/];

[for (c:Class | aModel.eContents(Class)) ]
  [if hasStereotype(c, 'StreamDatatype')]
     [for (subc:Class | c.eContents(Class)) ]
import [aModel.name.toLower()/].datatypes.[subc.name/];
    [/for]
  [elseif c.getAppliedStereotypes()->asSequence()->exists(s | s.name.strstr('Operation'))]
import [aModel.name.toLower()/].functions.[c.name/];
  [/if]
[/for]

import java.util.concurrent.TimeUnit;
import org.apache.flink.api.common.JobExecutionResult;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.windowing.time.Time;

public class [aModel.name/] {

    public static void main(String['['/][']'/] args) throws Exception {

       final StreamExecutionEnvironment env = StreamExecutionEnvironment
               .getExecutionEnvironment();
       
       //uncomment the below if you want to set the default parallelism for the project.
       //env.setParallelism(1);

[for (c:Class | aModel.eContents(Class)) ]
	[if hasStereotype(c, 'SocketSource')]
		[generateFlinkSocketSource(c)/]
	[elseif (hasStereotype(c, 'TextFileSource'))]
		[generateFlinkTextFileSource(c)/]
	[elseif (hasStereotype(c, 'KafkaSource'))]
		[comment TODO: handle case of kafka soure/]
	[elseif (hasStereotype(c, 'MapOperation'))]
		[generateFlinkMapOperation(c)/]
	[elseif (hasStereotype(c, 'FlatmapOperation'))]
		[generateFlinkFlatmapOperation(c)/]
	[elseif (hasStereotype(c, 'SumOperation'))]
		[generateFlinkSumOperation(c)/]
	[elseif (hasStereotype(c, 'WindowOperation'))]
		[generateFlinkWindowOperation(c)/]
	[elseif (hasStereotype(c, 'TextFileSink'))]
		[generateFlinkTextFileSink(c)/]
	[/if]
[/for]

       JobExecutionResult result = env.execute();
       System.out.println("EXECUTION TIME: " + result.getNetRuntime(TimeUnit.SECONDS));

    }
}
[/file]
[/template]